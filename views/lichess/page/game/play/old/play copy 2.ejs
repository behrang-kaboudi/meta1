<%- include('../../share/superheader') -%>
    <%-
include('../../component/mainnav') -%>

        <audio class="d-none" id="moveSound" controls>
  <source src="/sound/move.m4a" type="audio/ogg" />
</audio>
        <audio class="d-none" id="startSound" controls>
    <source src="/sound/start.wav" type="audio/ogg" />
</audio>
        <audio class="d-none" id="endSound" controls>
    <source src="/sound/end.wav" type="audio/ogg" />
</audio>
        <link rel="stylesheet" href="/components/bk-chessboard/css/bk-board.css" />
        <script src="/components/bk-chessboard/js/bk-board.js"></script>
        <script src="/components/bk-chessboard/js/bk-board-consts.js"></script>
        <script src="/js/chess.js"></script>
        <script src="/components/pgn/spgn.js"></script>
        <link rel="stylesheet" href="/components/pgn/spgn.css" />
        <div class="container-fluid">
            <div onclick="display.hide('bgAll');display.hide('promotionb');display.hide('promotionw');" id="bgAll" class="position-fixed row d-none" style="
      background-color: rgba(20, 20, 20, 0.479);
      width: 100%;
      height: 100%;
      top: 0px;
      z-index: 50;
    "></div>
            <div class="row mt-3">
                <div class="order-sm-2 order-lg-2 col-lg-4 col-md-5 align-items-center">
                    <br />
                    <br />
                    <div id="priTimePart" class="btn-warning p-2 rounded-2 mb-3" style="width: 100%">
                        <span> زمان اولیه برای شروع </span>

                        <span id="priTimeSide">--</span>
                        <span id="priTimeTime"> -- </span>
                        <span> ثانیه </span>
                    </div>
                    <div class="d-flex justify-content-between align-items-center px-4">
                        <div style="" class="h2">
                            <style>
                                .game-outer-signs {
                                    font-size: x-large;
                                }
                                
                                .game-outer-signs:hover {
                                    cursor: pointer;
                                }
                                
                                .game-outer-signs-resign:hover {
                                    color: red;
                                }
                                
                                .game-outer-signs-offerdraw:hover {
                                    color: green;
                                }
                            </style>
                            <span id="resign" onclick="resign()" class="p-2 rounded-2 game-outer-signs game-outer-signs-resign">
            <i class="far fa-flag" style=""></i>
          </span>
                            <span id="offerDraw" onclick="offerDraw()" class="p-2 rounded-2 game-outer-signs m-1 game-outer-signs-offerdraw">
            1/2
          </span>
                        </div>

                        <div class="dir-ltr">
                            <span id="result" class="h3">------</span>
                        </div>
                    </div>
                    <button id="acceptDraw" onclick="acceptDraw()" class="btn-success p-1 my-1 rounded-2 d-none">
        قبول پیشنهاد تساوی
      </button>
                    <div id="pgnViwer" style="width: 100%; height: 300px" class="px-3"></div>
                    <br />
                    <div class="text-center" style="width: 100%">
                        <span onclick="flip()" class="p-2 rounded-2 pointer" style="font-size: x-large">
          <i class="fas fa-sync fa-microscope"></i>
        </span>
                        <span onclick="creatRematch()" class="p-2 rounded-2 pointer" style="font-size: x-large">
          <i class="far fa-swords"></i>
        </span>
                    </div>
                </div>
                <div class="order-sm-1 order-lg-2 col-lg-4 col-md-7">
                    <div style="z-index: 150; margin-top: 10px" class="text-center d-flex justify-content-center w-100" style="width: 100%">
                        <div id="promotionb" class="picPromotion py-12 d-flex d-none z-index: 300">
                            <img onclick="doPromotion('n')" src="/components/bk-chessboard/pices/bn.svg" class="bg-light mx-1 rounded-2" style="width: 14%; border: 1px solid; z-index: 999" />
                            <img onclick="doPromotion('b')" src="/components/bk-chessboard/pices/bb.svg" class="bg-light mx-1 rounded-2" style="width: 14%; border: 1px solid; z-index: 999" />
                            <img onclick="doPromotion('r')" src="/components/bk-chessboard/pices/br.svg" class="bg-light mx-1 rounded-2" style="width: 14%; border: 1px solid; z-index: 999" />
                            <img onclick="doPromotion('q')" src="/components/bk-chessboard/pices/bq.svg" class="bg-light mx-1 rounded-2" style="width: 14%; border: 1px solid; z-index: 999" />
                        </div>
                        <div id="promotionw" class="picPromotion justify-content-center py-12 d-flex d-none" style="width: 100%">
                            <img onclick="doPromotion('n')" src="/components/bk-chessboard/pices/wn.svg" class="bg-light mx-1 rounded-2" style="width: 14%; border: 1px solid; z-index: 999" />
                            <img onclick="doPromotion('b')" src="/components/bk-chessboard/pices/wb.svg" class="bg-light mx-1 rounded-2" style="width: 14%; border: 1px solid; z-index: 999" />
                            <img onclick="doPromotion('r')" src="/components/bk-chessboard/pices/wr.svg" class="bg-light mx-1 rounded-2" style="width: 14%; border: 1px solid; z-index: 999" />
                            <img onclick="doPromotion('q')" src="/components/bk-chessboard/pices/wq.svg" class="bg-light mx-1 rounded-2" style="width: 14%; border: 1px solid; z-index: 999" />
                        </div>
                    </div>

                    <style>
                        #wTime,
                        #wTime * {
                            background-color: white;
                            color: black;
                            font-size: x-large;
                        }
                        
                        #bTime,
                        #bTime * {
                            background-color: black;
                            color: white;
                            font-size: x-large;
                        }
                    </style>
                    <div>
                        <div class="d-flex justify-content-between align-items-center my-1">
                            <div id="upTime"></div>
                            <div class="dir-ltr r ms-2 h6">
                                <i class="fa fa-toggle-off"></i>
                                <span id="upName"></span>
                                <span id="upRating" class="mx-1"></span>
                                <span id="upChangeRate" class="mx-1 "></span>
                            </div>
                        </div>
                    </div>

                    <div class="board" id="board"></div>
                    <div class="d-flex justify-content-between align-items-center my-1">
                        <div id="downTime"></div>
                        <div class="dir-ltr ms-2 h6">
                            <i class="fa fa-toggle-off"></i>
                            <span id="downName"></span>
                            <span id="downRating" class="mx-1"></span>
                            <span id="downChangeRate" class="mx-1 "></span>
                        </div>
                    </div>
                </div>
                <div class="order-sm-3 order-lg-3 col-lg-4 col-md-12">
                    <!-- <video autoplay></video> -->
                </div>
            </div>
        </div>
        <div id="timeSample" class="d-none">
            <div id="Time" class="dir-ltr px-1 rounded-1">
                <span id="Min" class=""> 3 </span>
                <span> : </span>
                <span>
      <span id="BigSec"> 0 </span>
                <span id="SmallSec"> 0 </span>
                </span>
            </div>
        </div>
        <div id="gameId" class="d-none">
            <%=gameId %>
        </div>
        <div id="gameData" class="d-none">
            <%-game %>
        </div>
        <script>
            var vid = document.getElementById('moveSound');
            //// viewr
            let gameFinished = false;
            let blackUser;
            let whiteUser;
            let timer = {
                timersInterval: null,
                startInterval: function(side) {
                    timer.timersInterval = setInterval(function() {
                        let s = side == 'w' ? 'white' : 'black';
                        game[s + 'RemainingTime'] -= 1000;
                        if (game[s + 'RemainingTime'] < 0) {
                            clearInterval(timer.timersInterval);
                            game[s + 'RemainingTime'] = 0;
                            socket.emit('newGameData', game._id);
                        }
                        timer.setClockTime(side);
                    }, 1000);
                },
                setClockTime: function(side) {
                    let s = side == 'w' ? 'white' : 'black';
                    timer.showTime(game[s + 'RemainingTime'], side);
                },
                primeryTime: null, // place for put interval key
                showPrimeryTime: function() {
                    game.firstMove.remainingTime--;
                    if (game.firstMove.remainingTime <= 0) {
                        game.firstMove.remainingTime = 0;
                        clearInterval(timer.primeryTime);
                        socket.emit('newGameData', game._id);
                    }
                    document.getElementById('priTimeTime').innerText =
                        game.firstMove.remainingTime;
                    document.getElementById('priTimeSide').innerText =
                        game.sideToMove.dictate;
                },
                showTime: function(time, side) {
                    if (time < 0) {
                        time = 0;
                    }
                    var parts = this.getTimeParts(time);

                    document.getElementById(side + 'Min').innerText = parts[0];
                    document.getElementById(side + 'BigSec').innerText = parts[1];
                    document.getElementById(side + 'SmallSec').innerText = parts[2];
                },
                getTimeParts: function(tim) {
                    tim = Math.floor(tim / 1000);
                    var parts = [];
                    parts[0] = Math.floor(tim / 60);
                    var s = tim % 60;
                    parts[1] = Math.floor(s / 10);
                    parts[2] = Math.floor(s % 10);
                    return parts;
                },
            };
            let lastMove = {
                flags: '',
                promotion: ''
            };
            let game = JSON.parse(document.getElementById('gameData').innerText.trim());
            let preGame = null;
            let viewSide = game.blackUserName == userName ? 'b' : 'w';
            let chess = new Chess();
            let bd2 = new BkBoard('board', {
                imgSrc: '/components/bk-chessboard/pices/'
            });
            bd2.Funcs.getSqs = getSqs;
            let spg = new Spgn('pgnViwer', bd2);
            $(document).ready(function() {
                bd2.creatBoard();
                bd2.Funcs.isCorrectMove = isCorrectMove;
                bd2.Funcs.moveEnd = afterMove;
                spg.initial();
                setBoard();
                gameDataProcess();
                socket.on('gameData', function(obj) {
                    // console.log(obj.game);
                    preGame = game;
                    game = obj.game;
                    gameDataProcess();
                });
                socket.on('connect', function(obj) {
                    socket.emit('newGameData', game._id);
                    console.log('connect');
                });
                socket.on('offerDraw', function(obj) {
                    if (userName != obj.userName) {
                        display.show('acceptDraw');
                    }
                });
                socket.emit('newGameData', game._id);
                console.log(game.firstMove.remainingTime)
                if (game.firstMove.isFirstMove && (game.firstMove.remainingTime > 0)) {
                    let start = document.getElementById('startSound');
                    start.play();
                }
            });

            function setBoard() {
                let downName = document.getElementById('downName');
                let upName = document.getElementById('upName');
                downName.innerText = '';
                upName.innerText = '';
                bd2.filipSide(viewSide);
                bd2.settings.sideToMove = viewSide;
                setTimes(viewSide, 'downTime');
                let oppSide = 'b';
                if (viewSide == 'b') {
                    oppSide = 'w';
                    downName.innerText = game.blackUserName + ': ';
                    if (blackUser) {
                        let innerText = blackUser[game.timeControll] - game.blackRate;
                        if (innerText > 0) {
                            // document
                            //     .getElementById('downChangeRate')
                            //     .classList.remove('text-danger');
                            innerText = ' +' + innerText;
                            document
                                .getElementById('downChangeRate')
                                .classList.add('text-success');
                        } else {
                            innerText = ' -' + innerText;
                            document
                                .getElementById('downChangeRate')
                                .classList.add('text-dangr');
                        }
                        document.getElementById('downChangeRate').innerText = innerText;
                    }
                    upName.innerText = game.whiteUserName + ': ';
                    document.getElementById('upRating').innerText = game.whiteRate;
                    document.getElementById('downRating').innerText = game.blackRate;
                    if (whiteUser) {
                        let innerText = whiteUser[game.timeControll] - game.whiteRate;
                        if (innerText > 0) {
                            // document
                            //     .getElementById('downChangeRate')
                            //     .classList.remove('text-danger');
                            let upChangeRate = document.getElementById('upChangeRate');
                            upChangeRate.classList.add('text-success');
                            innerText = ' +' + innerText;
                        } else {
                            let upChangeRate = document.getElementById('upChangeRate');
                            upChangeRate.classList.add('text-danger');
                            innerText = ' ' + innerText;
                        }
                        document.getElementById('upChangeRate').innerText = innerText;
                    }
                } else {
                    upName.innerText = game.blackUserName + ': ';
                    document.getElementById('upRating').innerText = game.blackRate;
                    if (blackUser) {
                        let innerText = blackUser[game.timeControll] - game.blackRate;
                        if (innerText > 0) {

                            document.getElementById('upChangeRate').classList.add('text-success');
                            innerText = ' +' + innerText;
                        } else {
                            document.getElementById('upChangeRate').classList.add('text-danger');
                            innerText = ' ' + innerText;
                        }
                        document.getElementById('upChangeRate').innerText = innerText;
                    }
                    downName.innerText = game.whiteUserName + ': ';
                    document.getElementById('downRating').innerText = game.whiteRate;
                    if (whiteUser) {
                        let innerText = whiteUser[game.timeControll] - game.whiteRate;
                        if (innerText > 0) {

                            document.getElementById('downChangeRate').classList.add('text-success');
                            innerText = ' +' + innerText;
                        } else {
                            document.getElementById('downChangeRate').classList.add('text-danger');
                            innerText = ' ' + innerText;
                        }
                        document.getElementById('downChangeRate').innerText = innerText;
                    }
                }
                setTimes(oppSide, 'upTime');
                if (gameFinished) {
                    timer.setClockTime('w');
                    timer.setClockTime('b');
                }
            }

            function flip() {
                viewSide = viewSide == 'w' ? 'b' : 'w';
                setBoard();
            }

            function gameDataProcess() {

                clearInterval(timer.primeryTime);
                clearInterval(timer.timersInterval);
                timer.setClockTime('w');
                timer.setClockTime('b');
                // console.log('ms', game.gmMoves);
                spg.setPgn(game.gmMoves);
                console.log(game.gmMoves);

                bd2.settings.canMove = false;
                if (isEndGame()) {
                    updateEngine();
                    bd2.settings.fen = chess.fen();
                    bd2.creatBoard();
                    setMask();
                    return;
                }
                if (game.firstMove.isFirstMove) {
                    timer.showPrimeryTime();
                    timer.primeryTime = setInterval(timer.showPrimeryTime, 1000);
                } else {
                    display.hide('priTimePart');
                    timer.startInterval(game.sideToMove.side);
                }
                updateEngine();
                setTurn();
                if (!preGame || game.gmMoves.length != preGame.gmMoves.length + 1) {
                    bd2.settings.fen = chess.fen();
                    bd2.creatBoard();
                    return;
                } else {
                    vid.play();
                    let move = game.gmMoves[game.gmMoves.length - 1];
                    move = JSON.parse(move);
                    if ('flags' in move) {
                        if (
                            move.flags == 'e' ||
                            move.flags == 'q' ||
                            move.flags == 'k' ||
                            move.flags == 'p'
                        ) {
                            bd2.settings.fen = chess.fen();
                            bd2.creatBoard();
                            setMask();
                            return;
                        }
                    } else {
                        bd2.settings.fen = chess.fen();
                        bd2.creatBoard();
                        setMask();
                        return;
                        // let enginFen = chess.fen().trim().split(' ')[0];
                        // let boardFen = bd2.getFen().trim().split(' ')[0];
                        // if (enginFen != boardFen) bd2.doMove(move.from, move.to);
                    }

                }
            }

            function setTurn() {
                if (
                    (game.sideToMove.side == 'w' && game.whiteUserName == userName) ||
                    (game.sideToMove.side == 'b' && game.blackUserName == userName)
                ) {
                    bd2.settings.canMove = true;
                }
            }

            function setTimes(side, place) {
                document.getElementById(place).innerText = '';
                let mainNode = document.getElementById('Time');
                let copyNode = mainNode.cloneNode(true);
                mainNode.id = side + mainNode.id;
                let min = document.getElementById('Min');
                min.id = side + min.id;
                min.innerText = game.gameTimeMins;
                min.classList.add(side + 'time');
                let bigSec = document.getElementById('BigSec');
                bigSec.id = side + bigSec.id;
                bigSec.innerText = parseInt(game.gameTimeSecs / 10);
                bigSec.classList.add(side + 'time');
                let smallSec = document.getElementById('SmallSec');
                smallSec.id = side + smallSec.id;
                smallSec.innerText = game.gameTimeSecs % 10;
                smallSec.classList.add(side + 'time');
                document.getElementById('timeSample').appendChild(copyNode);
                document.getElementById(place).appendChild(mainNode);
            }

            function isEndGame() {
                if (game.result.trim()) {
                    clearInterval(timer.primeryTime);
                    clearInterval(timer.timersInterval);
                    gameFinished = true;
                    bd2.canMove = false;
                    bd2.sideToMove = false;
                    document.getElementById('result').innerText = game.result;
                    document.getElementById('resign').disabled = true;
                    document.getElementById('offerDraw').disabled = true;
                    document.getElementById('acceptDraw').disabled = true;
                    display.hide('priTimePart');
                    spg.canClick = true;
                    socket.emit('userPubData', game.blackUserName, (ans) => {
                        blackUser = ans;
                        setBoard();
                    });
                    socket.emit('userPubData', game.whiteUserName, (ans) => {
                        whiteUser = ans;
                        setBoard();
                    });
                    let end = document.getElementById('endSound');
                    end.play();
                    return true;
                }
                return false;
            }
            // moveFuncs

            function getSqs(moveObj) {
                lastMove = moveObj;
                lastMove.userName = userName;
                lastMove.gameId = game._id;
            }

            function isCorrectMove(moveObj) {
                let move = chess.move(lastMove);
                if (!move) {
                    let moves = chess.moves({
                        verbose: true
                    });
                    for (let index = 0; index < moves.length; index++) {
                        const move = moves[index];
                        if (move.from == lastMove.from && move.to == lastMove.to) {
                            lastMove.type = 'promotion';

                            display.show('bgAll');
                            display.show('promotion' + game.sideToMove.side);
                            return false;
                        }
                    }
                    return move;
                }
                if (move.flags == 'e' || move.flags == 'q' || move.flags == 'k') {
                    lastMove.flags = move.flags;
                    bd2.settings.fen = chess.fen();
                    bd2.creatBoard();
                    setMask();
                    afterMove();
                    return;
                }
                return move;
            }

            function doPromotion(pice) {
                lastMove.promotion = pice;
                lastMove.flags = 'p';
                let m = chess.move(lastMove);
                bd2.settings.fen = chess.fen();
                display.hide('bgAll');
                display.hide('promotionw');
                display.hide('promotionb');
                bd2.creatBoard();
                setMask();
                afterMove();

            }

            function afterMove() {
                bd2.settings.canMove = false;
                socket.emit('gameMove', lastMove, (ans) => {});
            }

            function updateEngine() {
                let gmMoves = game.gmMoves;
                chess = new Chess(game.startPosition);
                for (let i = 0; i < gmMoves.length; i++) {
                    let mv = gmMoves[i];
                    if (mv) {
                        mv = JSON.parse(mv);
                        chess.move(mv);
                    }
                }
            }

            function resign() {
                if (gameFinished) return;
                socket.emit('resign', game._id, (ans) => {});
            }

            function offerDraw() {
                if (gameFinished) return;
                socket.emit('offerDraw', {
                    game,
                    userName
                }, (ans) => {});
            }

            function acceptDraw() {
                socket.emit('acceptDraw', game._id, (ans) => {});
            }

            var gmUp = setInterval(function(params) {
                socket.emit('newGameData', game._id);
                if (isEndGame()) clearInterval(gmUp);
            }, 1000);
            //userdata

            function creatRematch() {
                let gameTimeMins = game.gameTimeMins;
                let gameTimeSecs = game.gameTimeSecs;
                let timeIncresment = game.gameTimeSecs;
                let opponentUserName =
                    game.blackUserName == userName ? game.whiteUserName : game.blackUserName;
                let selectedColor = game.blackUserName == userName ? 'w' : 'b';
                let rated = game.rated;
                let obj = {
                    gameTimeMins,
                    gameTimeSecs,
                    timeIncresment,
                    opponentUserName,
                    selectedColor,
                    rated,
                };

                console.log(obj);
                socket.emit('creatChalenge', obj, (ans) => {
                    console.log(ans);
                    window.location.href = '/game/' + ans._id;
                });
            }

            function setMask() {
                bd2.removeMasks();
                let move = game.gmMoves[game.gmMoves.length - 1];
                move = JSON.parse(move);
                bd2.setMask(move.from, 'move-mask');
                bd2.setMask(move.to, 'move-mask');
            }
        </script>
        <%- include('../../share/superfooter') -%>